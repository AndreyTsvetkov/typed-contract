{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///typed-contract.min.js","webpack:///webpack/bootstrap 1d759a821ad7be0da9d2","webpack:///./TypedContract/TypeValidators/BaseValidator.js","webpack:///./TypedContract/TypeValidators/AnyValidator.js","webpack:///./TypedContract/TypeValidators/ArrayValidator.js","webpack:///./TypedContract/TypeValidators/BooleanValidator.js","webpack:///./TypedContract/TypeValidators/NumberValidator.js","webpack:///./TypedContract/TypeValidators/StringValidator.js","webpack:///./TypedContract/Contract/Contract.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","BaseValidator","variableValue","variableName","self","_variableValue","length","_variableName","prototype","Value","Name","__extends","d","b","__","constructor","hasOwnProperty","Object","create","BaseValidator_1","AnyValidator","_super","IsNotNull","ReferenceError","IsNull","IsDefined","IsUndefined","IsNullOrUndefined","undefined","ArrayValidator","IsEqualTo","compareTo","index","RangeError","IsNotEqualTo","IsLengthGreaterThan","IsLengthNotGreaterThan","IsLengthGreaterOrEqualTo","IsLengthNotGreaterOrEqualTo","IsLengthLessThan","IsLengthNotLessThan","IsLengthLessOrEqualThan","IsLengthNotLessOrEqualThan","Contains","_this","count","i","some","elem","NotContains","BooleanValidator","IsTrue","IsFalse","NumberValidator","IsGreaterThan","IsNotGreaterThan","IsGreaterOrEqualThan","IsNotGreaterOrEqualThan","IsLessThan","IsNotLessThan","IsLessOrEqualThan","IsNotLessOrEqualThan","IsBetween","startRange","endRange","IsNotBetween","StringValidator","ToMatch","regExp","test","ToNotMatch","indexOf","StartsWith","lastIndexOf","NotStartsWith","EndsWith","NotEndsWith","StringValidator_1","BooleanValidator_1","NumberValidator_1","ArrayValidator_1","AnyValidator_1","Contract","In","precondition","name","Array","Out","postcondition","foo7"],"mappings":"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","file":"typed-contract.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typed-contract\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typed-contract\"] = factory();\n\telse\n\t\troot[\"typed-contract\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typed-contract\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typed-contract\"] = factory();\n\telse\n\t\troot[\"typed-contract\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(7);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * Encapsulates any validators that apply to every type and state used by the validation chain.\r\n\t */\r\n\tvar BaseValidator = (function () {\r\n\t    function BaseValidator(variableValue, variableName) {\r\n\t        var self = this;\r\n\t        self._variableValue = variableValue;\r\n\t        if (variableName && variableName.length > 0) {\r\n\t            self._variableName = variableName;\r\n\t        }\r\n\t        else {\r\n\t            self._variableName = \"The variable\";\r\n\t        }\r\n\t    }\r\n\t    /**\r\n\t     * Value returns the value that was passed into the contract\r\n\t     * @returns {T}\r\n\t     * @constructor\r\n\t     */\r\n\t    BaseValidator.prototype.Value = function () {\r\n\t        return this._variableValue;\r\n\t    };\r\n\t    /**\r\n\t     * Name returns the variable name that was passed into the contract\r\n\t     * @returns {string}\r\n\t     * @constructor\r\n\t     */\r\n\t    BaseValidator.prototype.Name = function () {\r\n\t        return this._variableName;\r\n\t    };\r\n\t    return BaseValidator;\r\n\t}());\r\n\texports.BaseValidator = BaseValidator;\r\n\t//# sourceMappingURL=BaseValidator.js.map\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar BaseValidator_1 = __webpack_require__(1);\r\n\tvar AnyValidator = (function (_super) {\r\n\t    __extends(AnyValidator, _super);\r\n\t    function AnyValidator(variableValue, variableName) {\r\n\t        _super.call(this, variableValue, variableName);\r\n\t    }\r\n\t    /**\r\n\t     *\r\n\t     * IsNotNull checks if the type any variable is not null\r\n\t     * @throws a ReferenceError if the any is null\r\n\t     * @returns {AnyValidator}\r\n\t     */\r\n\t    AnyValidator.prototype.IsNotNull = function () {\r\n\t        if (this._variableValue === null) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNull checks if the any variable is null\r\n\t     * @throws a ReferenceError if the variable is not null\r\n\t     * @returns {AnyValidator}\r\n\t     */\r\n\t    AnyValidator.prototype.IsNull = function () {\r\n\t        if (this._variableValue !== null) {\r\n\t            throw new ReferenceError(this._variableName + \" should be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsDefined checks if the any variable is defined\r\n\t     * @throws ReferenceError if the any variable jis not defined\r\n\t     * @returns {AnyValidator}\r\n\t     */\r\n\t    AnyValidator.prototype.IsDefined = function () {\r\n\t        if (typeof this._variableValue === \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsUndefined checks if the any variable is undefined\r\n\t     * @throws a ReferenceError if the any variable is undefined\r\n\t     * @returns {AnyValidator}\r\n\t     */\r\n\t    AnyValidator.prototype.IsUndefined = function () {\r\n\t        if (typeof this._variableValue !== \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsNullOrUndefined checks if the any variable is not null or undefined\r\n\t     * @throws ReferenceError if the any variable is null or undefined\r\n\t     * @returns {AnyValidator}\r\n\t     */\r\n\t    AnyValidator.prototype.IsNullOrUndefined = function () {\r\n\t        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    return AnyValidator;\r\n\t}(BaseValidator_1.BaseValidator));\r\n\texports.AnyValidator = AnyValidator;\r\n\t//# sourceMappingURL=AnyValidator.js.map\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar BaseValidator_1 = __webpack_require__(1);\r\n\tvar ArrayValidator = (function (_super) {\r\n\t    __extends(ArrayValidator, _super);\r\n\t    function ArrayValidator(variableValue, variableName) {\r\n\t        _super.call(this, variableValue, variableName);\r\n\t    }\r\n\t    /**\r\n\t     *\r\n\t     * IsNull Checks if the array variable is null\r\n\t     * @throws ReferenceError if the variable is not null\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsNull = function () {\r\n\t        if (this._variableValue !== null) {\r\n\t            throw new ReferenceError(this._variableName + \" should be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotNull checks if the array variable is not null\r\n\t     * @throws ReferenceError if the variable is null\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsNotNull = function () {\r\n\t        if (this._variableValue === null) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsDefined checks if the array variable is defined\r\n\t     * @throws ReferenceError if the array variable is undefined\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsDefined = function () {\r\n\t        if (typeof this._variableValue === \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsUndefined checks if the array variable is undefined\r\n\t     * @throws ReferenceError if the array variable is defined\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsUndefined = function () {\r\n\t        if (this._variableValue !== undefined) {\r\n\t            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsNullOrUndefined checks if the array variable is not null or undefined\r\n\t     * @throws ReferenceError if the array variable is null or undefined\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsNullOrUndefined = function () {\r\n\t        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsEqualTo checks if the array variable is equal to the index of the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the array variable is not equal to the index given parameter passed into the function\r\n\t     * @param compareTo, index\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsEqualTo = function (compareTo, index) {\r\n\t        if (!compareTo.length || this._variableValue.length === 0) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue[index] !== compareTo[index]) {\r\n\t            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotEqualTo checks if the array variable is not equal to the index of the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the array variable is equal to the index given parameter passed into the function\r\n\t     * @param compareTo, index\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsNotEqualTo = function (compareTo, index) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n\t                \" please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue[index] === compareTo[index]) {\r\n\t            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthGreaterThan checks if the array variable length is greater than the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the array is not greater than the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthGreaterThan = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length < compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthNotGreaterThan checks if the array variable's length is not greater than the length of the contract precondition\r\n\t     * @throws RangeError if the array variable is greater than the length of the precondition passed into the instance of the TypedContract\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthNotGreaterThan = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length <= compareTo.length) {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n\t     * @throws RangeError if the array variable is not\r\n\t     * greater or equal than the length of the precondition passed into the instance of the TypedContract\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthGreaterOrEqualTo = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthNotGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n\t     * @throws RangeError if the array variable is not greater or\r\n\t     * equal than the length of the precondition passed into the instance of the TypedContract\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthNotGreaterOrEqualTo = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should not have a\\n             length greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthLessThan checks if the array variable's length is less than the length of the contract precondition\r\n\t     * @throws RangeError if the array variable is greater or\r\n\t     * equal than the length of the precondition passed into the instance of the TypedContract\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthLessThan = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length >= compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthNotLessThan checks if the array variable's length is not less than the length of the contract precondition\r\n\t     * @throws RangeError if the array variable is less than or\r\n\t     * equal than the length of the precondition passed into the instance of the TypedContract\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthNotLessThan = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length <= compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should have a length\\n        not less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthLessOrEqualThan checks if the array variable's length is less or equal than the length of the contract precondition\r\n\t     * @throws RangeError if the array variable is greater than\r\n\t     * the length of the precondition passed into the instance of the TypedContract\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthLessOrEqualThan = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length > compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should have a length less or equal\\n            to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthNotLessOrEqualThan checks if the array variable's length is not less or equal than the length of the contract precondition\r\n\t     * @throws RangeError if the array variable is less or equal than\r\n\t     * the length of the precondition passed into the instance of the TypedContract\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.IsLengthNotLessOrEqualThan = function (compareTo) {\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n\t                \"please append values to the array's in the instance of this TypedContract\");\r\n\t        }\r\n\t        if (this._variableValue.length <= compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should not have a\\n             length less or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * Contains checks if the array variable's values contains one or more values\r\n\t     * with in the precondition of the TypedContract\r\n\t     * @throws RangeError if the array variable does not contain any of the values\r\n\t     *  passed into the instance of the TypedContract using the Contains function\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.Contains = function (compareTo) {\r\n\t        var _this = this;\r\n\t        this.count = 0;\r\n\t        if (!compareTo.length || !this._variableValue.length) {\r\n\t            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n\t        }\r\n\t        for (var i = 0; i < compareTo.length; i++) {\r\n\t            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n\t                this.count++;\r\n\t            }\r\n\t        }\r\n\t        if (this.count === 0) {\r\n\t            throw new RangeError(this._variableName + \" should contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * NotContains checks if the array variable's values does not contain any values\r\n\t     * with in the precondition of the TypedContract\r\n\t     * @throws RangeError if the array variable does contain any of the values\r\n\t     *  passed into the instance of the TypedContract using the NotContains function\r\n\t     * @param compareTo\r\n\t     * @returns { ArrayValidator}\r\n\t     */\r\n\t    ArrayValidator.prototype.NotContains = function (compareTo) {\r\n\t        var _this = this;\r\n\t        this.count = 0;\r\n\t        if (compareTo.length === 0 || this._variableValue.length === 0) {\r\n\t            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n\t        }\r\n\t        for (var i = 0; i < compareTo.length; i++) {\r\n\t            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n\t                this.count++;\r\n\t            }\r\n\t        }\r\n\t        if (this.count > 0) {\r\n\t            throw new RangeError(this._variableName + \" should not contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    return ArrayValidator;\r\n\t}(BaseValidator_1.BaseValidator));\r\n\texports.ArrayValidator = ArrayValidator;\r\n\t//# sourceMappingURL=ArrayValidator.js.map\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar BaseValidator_1 = __webpack_require__(1);\r\n\tvar BooleanValidator = (function (_super) {\r\n\t    __extends(BooleanValidator, _super);\r\n\t    function BooleanValidator(variableValue, variableName) {\r\n\t        _super.call(this, variableValue, variableName);\r\n\t    }\r\n\t    /**\r\n\t     *\r\n\t     * IsNull checks if the boolean variable is null\r\n\t     * @throws a ReferenceError if the variable is not null\r\n\t     */\r\n\t    BooleanValidator.prototype.IsNull = function () {\r\n\t        if (this._variableValue === null && typeof this._variableValue === \"object\") {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new ReferenceError(this._variableName + \" should be null\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotNull checks if the boolean variable is not null\r\n\t     * @throws a ReferenceError if the variable is null\r\n\t     */\r\n\t    BooleanValidator.prototype.IsNotNull = function () {\r\n\t        if (this._variableValue == null) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsDefined checks if the boolean variable is defined\r\n\t     * @throws a ReferenceError if the boolen variable is undefined\r\n\t     * @returns {BooleanValidator}\r\n\t     */\r\n\t    BooleanValidator.prototype.IsDefined = function () {\r\n\t        if (typeof this._variableValue === \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsUndefined checks if the boolean variable is undefined\r\n\t     * @throws ReferenceError if the boolean variable is defined\r\n\t     * @returns {BooleanValidator}\r\n\t     */\r\n\t    BooleanValidator.prototype.IsUndefined = function () {\r\n\t        if (typeof this._variableValue !== \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsNullOrUndefined checks if the boolean variable is not null or undefined\r\n\t     * @throws ReferenceError if the boolean variable is null or undefined\r\n\t     * @returns {BooleanValidator}\r\n\t     */\r\n\t    BooleanValidator.prototype.IsNullOrUndefined = function () {\r\n\t        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsEqualTo checks if the boolean variable is equal to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the boolean variable is not equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {BooleanValidator}\r\n\t     */\r\n\t    BooleanValidator.prototype.IsEqualTo = function (compareTo) {\r\n\t        if (!this._variableValue === compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should be equal to the boolean variable \" + compareTo);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotEqualTo checks if the boolean variable is not equal to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the boolean variable is equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {BooleanValidator}\r\n\t     */\r\n\t    BooleanValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n\t        if (this._variableValue === compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should not be equal to the boolean \" + compareTo);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsTrue checks if the boolean variable is true\r\n\t     * @throws RangeError if the boolean variable is false\r\n\t     * @param compareTo\r\n\t     * @returns {BooleanValidator}\r\n\t     */\r\n\t    BooleanValidator.prototype.IsTrue = function () {\r\n\t        if (this._variableValue === false) {\r\n\t            throw new RangeError(this._variableName + \" should be true\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsFalse checks if the boolean variable is false\r\n\t     * @throws RangeError if the boolean variable is alse\r\n\t     * @param compareTo\r\n\t     * @returns {BooleanValidator}\r\n\t     */\r\n\t    BooleanValidator.prototype.IsFalse = function () {\r\n\t        if (this._variableValue === true) {\r\n\t            throw new RangeError(this._variableName + \" should be false\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    ;\r\n\t    return BooleanValidator;\r\n\t}(BaseValidator_1.BaseValidator));\r\n\texports.BooleanValidator = BooleanValidator;\r\n\t//# sourceMappingURL=BooleanValidator.js.map\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar BaseValidator_1 = __webpack_require__(1);\r\n\tvar NumberValidator = (function (_super) {\r\n\t    __extends(NumberValidator, _super);\r\n\t    function NumberValidator(variableValue, variableName) {\r\n\t        _super.call(this, variableValue, variableName);\r\n\t    }\r\n\t    /**\r\n\t     *\r\n\t     * IsNotNull checks if the type number variable is not null\r\n\t     * @throws a ReferenceError if the variable is null\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNotNull = function () {\r\n\t        if (this._variableValue === null) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNull checks if the string variable is null\r\n\t     * @throws a ReferenceError if the variable is not null\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNull = function () {\r\n\t        if (this._variableValue !== null) {\r\n\t            throw new ReferenceError(this._variableName + \" should be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsDefined checks if the number variable is defined\r\n\t     * @throws ReferenceError if the number variable jis not defined\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsDefined = function () {\r\n\t        if (typeof this._variableValue === \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsUndefined checks if the number variable is undefined\r\n\t     * @throws a ReferenceError if the number variable is undefined\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsUndefined = function () {\r\n\t        if (typeof this._variableValue !== \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsNullOrUndefined checks if the number variable is not null or undefined\r\n\t     * @throws ReferenceError if the number variable is null or undefined\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNullOrUndefined = function () {\r\n\t        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsEqualTo checks if the number variable is equal to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is not equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsEqualTo = function (compareTo) {\r\n\t        if (this._variableValue !== compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should be equal to the number variable \" + compareTo);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotEqualTo checks if the number variable is not equal to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n\t        if (this._variableValue === compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should not be equal to the number variable \" + compareTo);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsGreaterThan checks if the number variable is not greater than the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is less or equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsGreaterThan = function (compareTo) {\r\n\t        if (this._variableValue < compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotGreaterThan checks if the number variable is not greater to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNotGreaterThan = function (compareTo) {\r\n\t        if (this._variableValue > compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should not be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsGreaterOrEqualThan checks if the number variable is greater or equal than the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsGreaterOrEqualThan = function (compareTo) {\r\n\t        if (this._variableValue < compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotGreaterOrEqualThan checks if the number variable is not greater or equal than the\r\n\t     * parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is equal or greater than parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNotGreaterOrEqualThan = function (compareTo) {\r\n\t        if (this._variableValue > compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should not be greater or equal to \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLessThan checks if the number variable is less than the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsLessThan = function (compareTo) {\r\n\t        if (this._variableValue >= compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotLessThan checks if the number variable is not less than the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNotLessThan = function (compareTo) {\r\n\t        if (this._variableValue <= compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should not be less than \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsLessOrEqualThan = function (compareTo) {\r\n\t        if (this._variableValue > compareTo) {\r\n\t            throw new ReferenceError(this._variableName + \" should be less or equal than \" + compareTo + \" but is \" + this._variableName);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {NumberValidator}\r\n\t     */\r\n\t    NumberValidator.prototype.IsNotLessOrEqualThan = function (compareTo) {\r\n\t        if (this._variableValue <= compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should not be less or equal\\n                 than \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    NumberValidator.prototype.IsBetween = function (startRange, endRange) {\r\n\t        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n\t        }\r\n\t    };\r\n\t    NumberValidator.prototype.IsNotBetween = function (startRange, endRange) {\r\n\t        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n\t            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    return NumberValidator;\r\n\t}(BaseValidator_1.BaseValidator));\r\n\texports.NumberValidator = NumberValidator;\r\n\t//# sourceMappingURL=NumberValidator.js.map\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar BaseValidator_1 = __webpack_require__(1);\r\n\tvar StringValidator = (function (_super) {\r\n\t    __extends(StringValidator, _super);\r\n\t    function StringValidator(variableValue, variableName) {\r\n\t        _super.call(this, variableValue, variableName);\r\n\t    }\r\n\t    /**\r\n\t     *\r\n\t     * IsNotNull checks if the string variable is not null\r\n\t     * @throws a ReferenceError if the variable is null\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsNotNull = function () {\r\n\t        if (this._variableValue === null) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNull checks if the string variable is null\r\n\t     * @throws a ReferenceError if the variable is not null\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsNull = function () {\r\n\t        if (this._variableValue !== null) {\r\n\t            throw new ReferenceError(this._variableName + \" should be null\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsDefined checks if the string variable is defined\r\n\t     * @throws ReferenceError if the string is not defined\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsDefined = function () {\r\n\t        if (typeof this._variableValue === \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsNotDefined checks if the string variable is not defined\r\n\t     * @throws ReferenceError if variable is defined\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsUndefined = function () {\r\n\t        if (typeof this._variableValue !== \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsNullOrUndefined checks if a string variable is not null or undefined\r\n\t     * @throws ReferenceError if a string variable is null or not undefined\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsNullOrUndefined = function () {\r\n\t        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n\t            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsEqualTo cecks if the string variable is equal to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is not equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsEqualTo = function (compareTo) {\r\n\t        if (this._variableValue !== compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should be equal to the string variable \" + compareTo);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotEqualTo checks if the string variable is not equal to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is equal to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n\t        if (this._variableValue === compareTo) {\r\n\t            throw new RangeError(this._variableName + \" should not be equal to the string variable \" + compareTo);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLessThan checks if the string variable is less than to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is greater to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsLessThan = function (compareTo) {\r\n\t        if (this._variableValue.length > compareTo.length) {\r\n\t            throw new ReferenceError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotLessThan checks if the string variable is not less than to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is not less than to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsNotLessThan = function (compareTo) {\r\n\t        if (this._variableValue.length < compareTo.length) {\r\n\t            throw new ReferenceError(this._variableName + \" should not be less that \" + compareTo + \" but is \" + this._variableValue + \" \");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthGreaterThan checks if the string variable length is greater than to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is not greater than to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthGreaterThan = function (compareTo) {\r\n\t        if (this._variableValue.length <= compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should have a length greater\\n            than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthGreaterOrEqualTo checks if the string variable length is greater or equal than\r\n\t     * to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is not greater or equal than to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthGreaterOrEqualTo = function (compareTo) {\r\n\t        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthNotGreaterThan checks if the string variable length is not greater than to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is less or equal than to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthNotGreaterThan = function (compareTo) {\r\n\t        if (this._variableValue.length <= compareTo.length) {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsLengthNotGreaterOrEqualTo checks if the string variable length is not greater or equal than to the parameter passed into the function as an argument\r\n\t     * @throws RangeError if the string variable is greater or equal than to the parameter passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthNotGreaterOrEqualTo = function (compareTo) {\r\n\t        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should not have a length greater or equal to \" + compareTo.length + \"\\n              but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsLengthLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n\t     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     *\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthLessThan = function (compareTo) {\r\n\t        if (this._variableValue.length >= compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsLengthNotLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n\t     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     *\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthNotLessThan = function (compareTo) {\r\n\t        if (this._variableValue.length <= compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should not have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsLengthLessOrEqualThan checks if length of the string is less or equal than the comparable passed into the TypedContract\r\n\t     * @throws RangeError if the string length is greater than the comparable passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     *\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthLessOrEqualThan = function (compareTo) {\r\n\t        if (this._variableValue.length > compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should have a\\n            length less or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * IsLengthNotLessOrEqualThan checks if length of the string is not less or equal than the comparable passed into the TypedContract\r\n\t     * @throws RangeError if the string length is less or equal than the comparable passed into the function\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     *\r\n\t     */\r\n\t    StringValidator.prototype.IsLengthNotLessOrEqualThan = function (compareTo) {\r\n\t        if (this._variableValue.length <= compareTo.length) {\r\n\t            throw new RangeError(this._variableName + \" should not have a length less\\n            or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * ToMatch checks if the regular expression passed into the function matches the string\r\n\t     * precondition in the TypedContract\r\n\t     * @throws RangeError if the regular expression does not match the values in the precondition\r\n\t     * @param regExp\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.ToMatch = function (regExp) {\r\n\t        if (!regExp.test(this._variableValue)) {\r\n\t            throw new RangeError(this._variableName + \" should match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" does not match\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * ToNotMatch checks if the regular expression passed into the function does not match the string\r\n\t     * precondition in the TypedContract\r\n\t     * @throws RangeError if the regular expression does not match the values in the precondition\r\n\t     * @param regExp\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.ToNotMatch = function (regExp) {\r\n\t        if (regExp.test(this._variableValue)) {\r\n\t            throw new RangeError(this._variableName + \" should not match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" matches\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * Contains checks if the string passed into the function contains a match of the string\r\n\t     * precondition in the TypedContract\r\n\t     * @throws RangeError if the regular expression does match the values in the precondition\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.Contains = function (compareTo) {\r\n\t        if (this._variableValue.length === 0 && compareTo.length === 0) {\r\n\t            return this;\r\n\t        }\r\n\t        if (compareTo.length === 0 || this._variableValue.indexOf(compareTo) <= -1) {\r\n\t            throw new RangeError(this._variableName + \" should contain\\n           the pattern \" + compareTo + \" but the pattern is not found in \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * NotContains checks if the string passed into the function contains a match of the string\r\n\t     * precondition in the TypedContract\r\n\t     * @throws RangeError if the regular expression does not match the values in the precondition\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.NotContains = function (compareTo) {\r\n\t        if (this._variableValue.indexOf(compareTo) > -1) {\r\n\t            throw new RangeError(this._variableName + \" should not contain\\n           the pattern \" + compareTo + \" but the pattern is found in \" + this._variableValue);\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * StartsWith checks if the precondition in the TypedContract has the same starting string\r\n\t     * value as the comparable variable passed into the function\r\n\t     * @throws RangeError if the comparable argument passed into TypedContract does not contain the same starting values\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.StartsWith = function (compareTo) {\r\n\t        if ((this._variableValue).lastIndexOf(compareTo, 0) === 0) {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new RangeError(this._variableName + \" should start with \" + this._variableValue + \", but \" + compareTo + \" does not\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * NotStartsWith checks if the precondition in the TypedContract does not have the same starting string\r\n\t     * value as the comparable variable passed into the function\r\n\t     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same starting values\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.NotStartsWith = function (compareTo) {\r\n\t        if ((this._variableValue).lastIndexOf(compareTo, 0) !== 0) {\r\n\t            throw new RangeError(this._variableName + \" should not start with \" + compareTo + \" but \" + this._variableValue + \" does not\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * EndsWith checks if the precondition in the TypedContract has the same ending string\r\n\t     * values as the comparable variable passed into the function\r\n\t     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same ending values\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.EndsWith = function (compareTo) {\r\n\t        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) === -1) {\r\n\t            throw new RangeError(this._variableName + \" should end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * NotEndsWith checks if the precondition in the TypedContract does not have the same ending string\r\n\t     * values as the comparable variable passed into the function\r\n\t     * @throws RangeError if the comparable argument passed into TypedContract does contain the same ending values\r\n\t     * @param compareTo\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.NotEndsWith = function (compareTo) {\r\n\t        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) !== -1) {\r\n\t            throw new RangeError(this._variableName + \" should not end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsBetween checks if the precondition in the TypedContract is in between the starting and ending string range\r\n\t     * and are compared against the comparable variable passed into the function\r\n\t     * @throws RangeError if the comparable argument passed into TypedContract is not in between the\r\n\t     * starting and ending range\r\n\t     * @param startRange, endRange\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsBetween = function (startRange, endRange) {\r\n\t        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n\t            return this;\r\n\t        }\r\n\t        else {\r\n\t            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * IsNotBetween checks if the precondition in the TypedContract is not in between the starting and ending string range\r\n\t     * and are compared against the comparable variable passed into the function\r\n\t     * @throws RangeError if the comparable argument passed into TypedContract is in between the\r\n\t     * starting and ending range\r\n\t     * @param startRange, endRange\r\n\t     * @returns {StringValidator}\r\n\t     */\r\n\t    StringValidator.prototype.IsNotBetween = function (startRange, endRange) {\r\n\t        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n\t            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n\t        }\r\n\t        else {\r\n\t            return this;\r\n\t        }\r\n\t    };\r\n\t    return StringValidator;\r\n\t}(BaseValidator_1.BaseValidator));\r\n\texports.StringValidator = StringValidator;\r\n\t//# sourceMappingURL=StringValidator.js.map\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar StringValidator_1 = __webpack_require__(6);\r\n\tvar BooleanValidator_1 = __webpack_require__(4);\r\n\tvar NumberValidator_1 = __webpack_require__(5);\r\n\tvar ArrayValidator_1 = __webpack_require__(3);\r\n\tvar AnyValidator_1 = __webpack_require__(2);\r\n\tvar Contract = (function () {\r\n\t    function Contract() {\r\n\t    }\r\n\t    Contract.prototype.In = function (precondition, name) {\r\n\t        if (name === void 0) { name = undefined; }\r\n\t        if (typeof precondition === \"string\" || precondition === null || precondition === undefined) {\r\n\t            return new StringValidator_1.StringValidator(precondition, name);\r\n\t        }\r\n\t        else if (typeof precondition === \"boolean\" || precondition === null || precondition === undefined) {\r\n\t            return new BooleanValidator_1.BooleanValidator(precondition, name);\r\n\t        }\r\n\t        else if (typeof precondition === \"number\" || precondition === null || precondition === undefined) {\r\n\t            return new NumberValidator_1.NumberValidator(precondition, name);\r\n\t        }\r\n\t        else if (precondition instanceof Array ||\r\n\t            precondition instanceof Array === null\r\n\t            || precondition instanceof Array === undefined) {\r\n\t            return new ArrayValidator_1.ArrayValidator(precondition, name);\r\n\t        }\r\n\t        else {\r\n\t            return new AnyValidator_1.AnyValidator(precondition, name);\r\n\t        }\r\n\t    };\r\n\t    Contract.prototype.Out = function (postcondition, name) {\r\n\t        if (name === void 0) { name = undefined; }\r\n\t        if (typeof postcondition === \"string\" || postcondition === null || postcondition === undefined) {\r\n\t            return new StringValidator_1.StringValidator(postcondition, name);\r\n\t        }\r\n\t        else if (typeof postcondition === \"boolean\" || postcondition === null || postcondition === undefined) {\r\n\t            return new BooleanValidator_1.BooleanValidator(postcondition, name);\r\n\t        }\r\n\t        else if (typeof postcondition === \"number\" || postcondition === null || postcondition === undefined) {\r\n\t            return new NumberValidator_1.NumberValidator(postcondition, name);\r\n\t        }\r\n\t        else if (postcondition instanceof Array ||\r\n\t            postcondition instanceof Array === null ||\r\n\t            postcondition instanceof Array === undefined) {\r\n\t            return new ArrayValidator_1.ArrayValidator(postcondition, name);\r\n\t        }\r\n\t        else {\r\n\t            return new AnyValidator_1.AnyValidator(postcondition, name);\r\n\t        }\r\n\t    };\r\n\t    Contract.prototype.foo7 = function () {\r\n\t        return \"foo\";\r\n\t    };\r\n\t    ;\r\n\t    return Contract;\r\n\t}());\r\n\texports.Contract = Contract;\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** typed-contract.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1d759a821ad7be0da9d2\n **/","\"use strict\";\r\n/**\r\n * Encapsulates any validators that apply to every type and state used by the validation chain.\r\n */\r\nvar BaseValidator = (function () {\r\n    function BaseValidator(variableValue, variableName) {\r\n        var self = this;\r\n        self._variableValue = variableValue;\r\n        if (variableName && variableName.length > 0) {\r\n            self._variableName = variableName;\r\n        }\r\n        else {\r\n            self._variableName = \"The variable\";\r\n        }\r\n    }\r\n    /**\r\n     * Value returns the value that was passed into the contract\r\n     * @returns {T}\r\n     * @constructor\r\n     */\r\n    BaseValidator.prototype.Value = function () {\r\n        return this._variableValue;\r\n    };\r\n    /**\r\n     * Name returns the variable name that was passed into the contract\r\n     * @returns {string}\r\n     * @constructor\r\n     */\r\n    BaseValidator.prototype.Name = function () {\r\n        return this._variableName;\r\n    };\r\n    return BaseValidator;\r\n}());\r\nexports.BaseValidator = BaseValidator;\r\n//# sourceMappingURL=BaseValidator.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./TypedContract/TypeValidators/BaseValidator.js\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar AnyValidator = (function (_super) {\r\n    __extends(AnyValidator, _super);\r\n    function AnyValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNotNull checks if the type any variable is not null\r\n     * @throws a ReferenceError if the any is null\r\n     * @returns {AnyValidator}\r\n     */\r\n    AnyValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNull checks if the any variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns {AnyValidator}\r\n     */\r\n    AnyValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the any variable is defined\r\n     * @throws ReferenceError if the any variable jis not defined\r\n     * @returns {AnyValidator}\r\n     */\r\n    AnyValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the any variable is undefined\r\n     * @throws a ReferenceError if the any variable is undefined\r\n     * @returns {AnyValidator}\r\n     */\r\n    AnyValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the any variable is not null or undefined\r\n     * @throws ReferenceError if the any variable is null or undefined\r\n     * @returns {AnyValidator}\r\n     */\r\n    AnyValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return AnyValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.AnyValidator = AnyValidator;\r\n//# sourceMappingURL=AnyValidator.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./TypedContract/TypeValidators/AnyValidator.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar ArrayValidator = (function (_super) {\r\n    __extends(ArrayValidator, _super);\r\n    function ArrayValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNull Checks if the array variable is null\r\n     * @throws ReferenceError if the variable is not null\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotNull checks if the array variable is not null\r\n     * @throws ReferenceError if the variable is null\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the array variable is defined\r\n     * @throws ReferenceError if the array variable is undefined\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the array variable is undefined\r\n     * @throws ReferenceError if the array variable is defined\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsUndefined = function () {\r\n        if (this._variableValue !== undefined) {\r\n            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the array variable is not null or undefined\r\n     * @throws ReferenceError if the array variable is null or undefined\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo checks if the array variable is equal to the index of the parameter passed into the function as an argument\r\n     * @throws RangeError if the array variable is not equal to the index given parameter passed into the function\r\n     * @param compareTo, index\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsEqualTo = function (compareTo, index) {\r\n        if (!compareTo.length || this._variableValue.length === 0) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue[index] !== compareTo[index]) {\r\n            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the array variable is not equal to the index of the parameter passed into the function as an argument\r\n     * @throws RangeError if the array variable is equal to the index given parameter passed into the function\r\n     * @param compareTo, index\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsNotEqualTo = function (compareTo, index) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n                \" please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue[index] === compareTo[index]) {\r\n            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterThan checks if the array variable length is greater than the parameter passed into the function as an argument\r\n     * @throws RangeError if the array is not greater than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthGreaterThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length < compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterThan checks if the array variable's length is not greater than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotGreaterThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is not\r\n     * greater or equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthGreaterOrEqualTo = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is not greater or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotGreaterOrEqualTo = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a\\n             length greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthLessThan checks if the array variable's length is less than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthLessThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length >= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotLessThan checks if the array variable's length is not less than the length of the contract precondition\r\n     * @throws RangeError if the array variable is less than or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotLessThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        not less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthLessOrEqualThan checks if the array variable's length is less or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater than\r\n     * the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthLessOrEqualThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length less or equal\\n            to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotLessOrEqualThan checks if the array variable's length is not less or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is less or equal than\r\n     * the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotLessOrEqualThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a\\n             length less or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * Contains checks if the array variable's values contains one or more values\r\n     * with in the precondition of the TypedContract\r\n     * @throws RangeError if the array variable does not contain any of the values\r\n     *  passed into the instance of the TypedContract using the Contains function\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.Contains = function (compareTo) {\r\n        var _this = this;\r\n        this.count = 0;\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n        }\r\n        for (var i = 0; i < compareTo.length; i++) {\r\n            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n                this.count++;\r\n            }\r\n        }\r\n        if (this.count === 0) {\r\n            throw new RangeError(this._variableName + \" should contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     * NotContains checks if the array variable's values does not contain any values\r\n     * with in the precondition of the TypedContract\r\n     * @throws RangeError if the array variable does contain any of the values\r\n     *  passed into the instance of the TypedContract using the NotContains function\r\n     * @param compareTo\r\n     * @returns { ArrayValidator}\r\n     */\r\n    ArrayValidator.prototype.NotContains = function (compareTo) {\r\n        var _this = this;\r\n        this.count = 0;\r\n        if (compareTo.length === 0 || this._variableValue.length === 0) {\r\n            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n        }\r\n        for (var i = 0; i < compareTo.length; i++) {\r\n            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n                this.count++;\r\n            }\r\n        }\r\n        if (this.count > 0) {\r\n            throw new RangeError(this._variableName + \" should not contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        return this;\r\n    };\r\n    return ArrayValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.ArrayValidator = ArrayValidator;\r\n//# sourceMappingURL=ArrayValidator.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./TypedContract/TypeValidators/ArrayValidator.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar BooleanValidator = (function (_super) {\r\n    __extends(BooleanValidator, _super);\r\n    function BooleanValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNull checks if the boolean variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     */\r\n    BooleanValidator.prototype.IsNull = function () {\r\n        if (this._variableValue === null && typeof this._variableValue === \"object\") {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotNull checks if the boolean variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     */\r\n    BooleanValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue == null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the boolean variable is defined\r\n     * @throws a ReferenceError if the boolen variable is undefined\r\n     * @returns {BooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the boolean variable is undefined\r\n     * @throws ReferenceError if the boolean variable is defined\r\n     * @returns {BooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the boolean variable is not null or undefined\r\n     * @throws ReferenceError if the boolean variable is null or undefined\r\n     * @returns {BooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo checks if the boolean variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the boolean variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {BooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsEqualTo = function (compareTo) {\r\n        if (!this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the boolean variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the boolean variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the boolean variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {BooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the boolean \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsTrue checks if the boolean variable is true\r\n     * @throws RangeError if the boolean variable is false\r\n     * @param compareTo\r\n     * @returns {BooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsTrue = function () {\r\n        if (this._variableValue === false) {\r\n            throw new RangeError(this._variableName + \" should be true\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsFalse checks if the boolean variable is false\r\n     * @throws RangeError if the boolean variable is alse\r\n     * @param compareTo\r\n     * @returns {BooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsFalse = function () {\r\n        if (this._variableValue === true) {\r\n            throw new RangeError(this._variableName + \" should be false\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    ;\r\n    return BooleanValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.BooleanValidator = BooleanValidator;\r\n//# sourceMappingURL=BooleanValidator.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./TypedContract/TypeValidators/BooleanValidator.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar NumberValidator = (function (_super) {\r\n    __extends(NumberValidator, _super);\r\n    function NumberValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNotNull checks if the type number variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNull checks if the string variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the number variable is defined\r\n     * @throws ReferenceError if the number variable jis not defined\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the number variable is undefined\r\n     * @throws a ReferenceError if the number variable is undefined\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the number variable is not null or undefined\r\n     * @throws ReferenceError if the number variable is null or undefined\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo checks if the number variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsEqualTo = function (compareTo) {\r\n        if (this._variableValue !== compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the number variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the number variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the number variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsGreaterThan checks if the number variable is not greater than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is less or equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsGreaterThan = function (compareTo) {\r\n        if (this._variableValue < compareTo) {\r\n            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotGreaterThan checks if the number variable is not greater to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotGreaterThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsGreaterOrEqualThan checks if the number variable is greater or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsGreaterOrEqualThan = function (compareTo) {\r\n        if (this._variableValue < compareTo) {\r\n            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotGreaterOrEqualThan checks if the number variable is not greater or equal than the\r\n     * parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal or greater than parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotGreaterOrEqualThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be greater or equal to \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLessThan checks if the number variable is less than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsLessThan = function (compareTo) {\r\n        if (this._variableValue >= compareTo) {\r\n            throw new RangeError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotLessThan checks if the number variable is not less than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotLessThan = function (compareTo) {\r\n        if (this._variableValue <= compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new ReferenceError(this._variableName + \" should be less or equal than \" + compareTo + \" but is \" + this._variableName);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue <= compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be less or equal\\n                 than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    NumberValidator.prototype.IsBetween = function (startRange, endRange) {\r\n        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n        }\r\n    };\r\n    NumberValidator.prototype.IsNotBetween = function (startRange, endRange) {\r\n        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return NumberValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.NumberValidator = NumberValidator;\r\n//# sourceMappingURL=NumberValidator.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./TypedContract/TypeValidators/NumberValidator.js\n ** module id = 5\n ** module chunks = 0\n **/","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar StringValidator = (function (_super) {\r\n    __extends(StringValidator, _super);\r\n    function StringValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNotNull checks if the string variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNull checks if the string variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the string variable is defined\r\n     * @throws ReferenceError if the string is not defined\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNotDefined checks if the string variable is not defined\r\n     * @throws ReferenceError if variable is defined\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if a string variable is not null or undefined\r\n     * @throws ReferenceError if a string variable is null or not undefined\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo cecks if the string variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsEqualTo = function (compareTo) {\r\n        if (this._variableValue !== compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the string variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the string variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the string variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLessThan checks if the string variable is less than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsLessThan = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new ReferenceError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotLessThan checks if the string variable is not less than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not less than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotLessThan = function (compareTo) {\r\n        if (this._variableValue.length < compareTo.length) {\r\n            throw new ReferenceError(this._variableName + \" should not be less that \" + compareTo + \" but is \" + this._variableValue + \" \");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterThan checks if the string variable length is greater than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not greater than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthGreaterThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length greater\\n            than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterOrEqualTo checks if the string variable length is greater or equal than\r\n     * to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not greater or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthGreaterOrEqualTo = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterThan checks if the string variable length is not greater than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is less or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthNotGreaterThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterOrEqualTo checks if the string variable length is not greater or equal than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is greater or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthNotGreaterOrEqualTo = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length greater or equal to \" + compareTo.length + \"\\n              but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthLessThan = function (compareTo) {\r\n        if (this._variableValue.length >= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthNotLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthNotLessThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthLessOrEqualThan checks if length of the string is less or equal than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater than the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a\\n            length less or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthNotLessOrEqualThan checks if length of the string is not less or equal than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is less or equal than the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthNotLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length less\\n            or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * ToMatch checks if the regular expression passed into the function matches the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param regExp\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.ToMatch = function (regExp) {\r\n        if (!regExp.test(this._variableValue)) {\r\n            throw new RangeError(this._variableName + \" should match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" does not match\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * ToNotMatch checks if the regular expression passed into the function does not match the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param regExp\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.ToNotMatch = function (regExp) {\r\n        if (regExp.test(this._variableValue)) {\r\n            throw new RangeError(this._variableName + \" should not match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" matches\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * Contains checks if the string passed into the function contains a match of the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does match the values in the precondition\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.Contains = function (compareTo) {\r\n        if (this._variableValue.length === 0 && compareTo.length === 0) {\r\n            return this;\r\n        }\r\n        if (compareTo.length === 0 || this._variableValue.indexOf(compareTo) <= -1) {\r\n            throw new RangeError(this._variableName + \" should contain\\n           the pattern \" + compareTo + \" but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * NotContains checks if the string passed into the function contains a match of the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.NotContains = function (compareTo) {\r\n        if (this._variableValue.indexOf(compareTo) > -1) {\r\n            throw new RangeError(this._variableName + \" should not contain\\n           the pattern \" + compareTo + \" but the pattern is found in \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * StartsWith checks if the precondition in the TypedContract has the same starting string\r\n     * value as the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract does not contain the same starting values\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.StartsWith = function (compareTo) {\r\n        if ((this._variableValue).lastIndexOf(compareTo, 0) === 0) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should start with \" + this._variableValue + \", but \" + compareTo + \" does not\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * NotStartsWith checks if the precondition in the TypedContract does not have the same starting string\r\n     * value as the comparable variable passed into the function\r\n     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same starting values\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.NotStartsWith = function (compareTo) {\r\n        if ((this._variableValue).lastIndexOf(compareTo, 0) !== 0) {\r\n            throw new RangeError(this._variableName + \" should not start with \" + compareTo + \" but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * EndsWith checks if the precondition in the TypedContract has the same ending string\r\n     * values as the comparable variable passed into the function\r\n     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same ending values\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.EndsWith = function (compareTo) {\r\n        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) === -1) {\r\n            throw new RangeError(this._variableName + \" should end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * NotEndsWith checks if the precondition in the TypedContract does not have the same ending string\r\n     * values as the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract does contain the same ending values\r\n     * @param compareTo\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.NotEndsWith = function (compareTo) {\r\n        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) !== -1) {\r\n            throw new RangeError(this._variableName + \" should not end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsBetween checks if the precondition in the TypedContract is in between the starting and ending string range\r\n     * and are compared against the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract is not in between the\r\n     * starting and ending range\r\n     * @param startRange, endRange\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsBetween = function (startRange, endRange) {\r\n        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotBetween checks if the precondition in the TypedContract is not in between the starting and ending string range\r\n     * and are compared against the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract is in between the\r\n     * starting and ending range\r\n     * @param startRange, endRange\r\n     * @returns {StringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotBetween = function (startRange, endRange) {\r\n        if (this._variableValue > startRange && this._variableValue < endRange) {\r\n            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return StringValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.StringValidator = StringValidator;\r\n//# sourceMappingURL=StringValidator.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./TypedContract/TypeValidators/StringValidator.js\n ** module id = 6\n ** module chunks = 0\n **/","import { StringValidator } from \"../TypeValidators/StringValidator\";\r\nimport { BooleanValidator } from \"../TypeValidators/BooleanValidator\";\r\nimport { NumberValidator } from \"../TypeValidators/NumberValidator\";\r\nimport { ArrayValidator } from \"../TypeValidators/ArrayValidator\";\r\nimport { AnyValidator } from \"../TypeValidators/AnyValidator\";\r\n\r\nexport class Contract {\r\n    public In(precondition:string):StringValidator;\r\n    public In(precondition:string, name:string):StringValidator;\r\n    public In(precondition:boolean):BooleanValidator;\r\n    public In(precondition:boolean, name:string):BooleanValidator;\r\n    public In(precondition:number):NumberValidator;\r\n    public In(precondition:number, name:string):NumberValidator;\r\n    public In(precondition:any[]):ArrayValidator;\r\n    public In(precondition:any[], name:string):ArrayValidator;\r\n    public In(precondition:any, name:string):AnyValidator;\r\n    public In(precondition:any):AnyValidator;\r\n    public In(precondition:any, name:string = undefined):any {\r\n\r\n        if (typeof precondition === \"string\" || precondition === null || precondition === undefined) {\r\n            return new StringValidator(precondition, name);\r\n        } else if (typeof precondition === \"boolean\" || precondition === null || precondition === undefined) {\r\n            return new BooleanValidator(precondition, name);\r\n        } else if (typeof precondition === \"number\" || precondition === null || precondition === undefined) {\r\n            return new NumberValidator(precondition, name);\r\n        } else if (precondition instanceof Array ||\r\n            precondition instanceof Array === null\r\n            || precondition instanceof Array === undefined) {\r\n            return new ArrayValidator(precondition, name);\r\n        } else {\r\n            return new AnyValidator(precondition, name);\r\n        }\r\n    }\r\n\r\n    public Out(postcondition:string):StringValidator;\r\n    public Out(postcondition:string, name:string):StringValidator;\r\n    public Out(postcondition:boolean):BooleanValidator;\r\n    public Out(postcondition:boolean, name:string):BooleanValidator;\r\n    public Out(postcondition:number):NumberValidator;\r\n    public Out(postcondition:number, name:string):NumberValidator;\r\n    public Out(postcondition:any[]):ArrayValidator;\r\n    public Out(postcondition:any[], name:string):ArrayValidator;\r\n    public Out(postcondition:any, name:string):AnyValidator;\r\n    public Out(postcondition:any):AnyValidator;\r\n    public Out(postcondition:any, name:string = undefined):any {\r\n\r\n        if (typeof postcondition === \"string\" || postcondition === null || postcondition === undefined) {\r\n            return new StringValidator(postcondition, name);\r\n        } else if (typeof postcondition === \"boolean\" || postcondition === null || postcondition === undefined) {\r\n            return new BooleanValidator(postcondition, name);\r\n        } else if (typeof postcondition === \"number\" || postcondition === null || postcondition === undefined) {\r\n            return new NumberValidator(postcondition, name);\r\n        } else if (postcondition instanceof Array ||\r\n            postcondition instanceof Array === null ||\r\n            postcondition instanceof Array === undefined) {\r\n            return new ArrayValidator(postcondition, name);\r\n        } else {\r\n            return new AnyValidator(postcondition, name);\r\n        }\r\n    }\r\n\r\n    public foo7():string {\r\n        return \"foo\";\r\n    };\r\n}\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./TypedContract/Contract/Contract.ts\n **/"],"sourceRoot":""}